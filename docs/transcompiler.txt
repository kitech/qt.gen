
CanonicalType():
    可用于typedef



# TO C Language
### *this_ 全部在proto中使用 void*
### & 引用参数，转成指针类型
### return RECORD, 转成指针类型
### 如果参数为RECORD，或者RECORAD引用，考虑采用打包成某一个或者多个uint64来处理。需要一个打包解包处理。包方式为，len(1B), data。好像也不行，像QString，数据长度肯定是不固定的，数据不在类里面，有可能是指针。POD类型？
### TODO
* [ ] 函数参数的处理
* [ ] iterator => const_iterator问题 

# TO Go Language
### types
char** => []string
uchar* => []byte
RValue => ???
类内类：=> ???

### todos

* constant 分模块

### C++ 函数/方法FFI调用机制分析 (ABI)
*** 类返回值  RECORD x32
  调用栈分配，作为首参数传递给调用函数，即函数签名多了一个返回值参数sret
*** 类返回值  RECORD <= 16B, x64
  返回16B内存，调用方拆解
*** 类返回值  RECORD > 16B, x64
  调用方栈分配，作为首参数传递给调用函数，即函数签名多了一个返回值参数sret
*** 类参数 RECORD x32
  调用方栈分配，传递结构体指针。
*** 类参数 RECORD <= 16B x64
  调用方拆解类字段分别传入，函数签名多了几个类的字段。并不是直接传递的类指针。
*** 类参数 RECORD > 16B x64
  调用方栈分配，传递类指针。
*** 类参数引用
  调用方直接传递类指针
*** 类返回值引用
  返回类指针
*** 方法调用
  函数签名比原始签名多一个this指针参数，在所有参数之前，在sret之后


